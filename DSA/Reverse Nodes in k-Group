class Solution {
public:
    ListNode* findk(ListNode* temp, int k){
        while(temp!= NULL && k >1){
            k--;
            temp = temp->next;
        }
        return temp;
    }
    ListNode* reverse(ListNode* temp){
        ListNode* prev = NULL;
        ListNode* curr = temp;
        while (curr != NULL) {
            ListNode* next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode* temp = head;
        ListNode* newHead = NULL;
        ListNode* prev = NULL;

        while(temp!= NULL){
            ListNode* Kth = findk(temp, k);
            if(Kth == NULL){
                if(prev != NULL){
                    prev->next = temp;
                }
                break;
            }
            ListNode* next = Kth->next;
            Kth->next = NULL;

            ListNode* reversed = reverse(temp);

            if(newHead == NULL) {
                newHead = reversed;  
            } else {
                prev->next = reversed;
            }
            temp->next = next;
            prev = temp;
            temp = next;
        }

        return newHead ? newHead : head;
    }
};